from flask import Flask, render_template, request, jsonify, send_file
import datetime
import wikipedia
import pyttsx3
import threading
import webbrowser
import os
import requests
import json
import random
from collections import Counter
import string
import re
import tempfile
import time
import subprocess
import sys
from gtts import gTTS
from io import BytesIO

app = Flask(__name__)

# ============= CONFIGURACI√ìN DE IA =============
# Intentar cargar desde config_ia.py (desarrollo local)
# O desde variables de entorno (producci√≥n)
try:
    from config_ia import (
        IA_PROVIDER, OPENAI_API_KEY, GEMINI_API_KEY, 
        OPENAI_MODEL, GEMINI_MODEL, VELOCIDAD_VOZ, VOLUMEN_VOZ,
        MOTOR_VOZ, GTTS_LANG, GTTS_SLOW, GTTS_SPEED
    )
    print("\n" + "üîß"*30)
    print("‚úÖ Configuraci√≥n cargada desde config_ia.py")
    print(f"   ü§ñ Proveedor IA: {IA_PROVIDER}")
    print(f"   üé§ Motor de voz: {MOTOR_VOZ}")
    print(f"   üåç Idioma gTTS: {GTTS_LANG}")
    print(f"   ‚ö° Velocidad gTTS: {GTTS_SPEED}x")
    print("üîß"*30 + "\n")
except ImportError:
    # Cargar desde variables de entorno (producci√≥n)
    print("\n" + "üåê"*30)
    print("üåê Cargando configuraci√≥n desde variables de entorno")
    IA_PROVIDER = os.environ.get('IA_PROVIDER', 'local')
    OPENAI_API_KEY = os.environ.get('OPENAI_API_KEY', 'TU_OPENAI_API_KEY_AQUI')
    GEMINI_API_KEY = os.environ.get('GEMINI_API_KEY', 'TU_GEMINI_API_KEY_AQUI')
    OPENAI_MODEL = os.environ.get('OPENAI_MODEL', 'gpt-3.5-turbo')
    GEMINI_MODEL = os.environ.get('GEMINI_MODEL', 'gemini-2.0-flash')
    VELOCIDAD_VOZ = int(os.environ.get('VELOCIDAD_VOZ', '250'))
    VOLUMEN_VOZ = float(os.environ.get('VOLUMEN_VOZ', '0.95'))
    MOTOR_VOZ = os.environ.get('MOTOR_VOZ', 'gtts')
    GTTS_LANG = os.environ.get('GTTS_LANG', 'es')
    GTTS_SLOW = os.environ.get('GTTS_SLOW', 'False').lower() == 'true'
    GTTS_SPEED = float(os.environ.get('GTTS_SPEED', '1.5'))
    print(f"   ü§ñ Proveedor IA: {IA_PROVIDER}")
    print(f"   üé§ Motor de voz: {MOTOR_VOZ}")
    print("üåê"*30 + "\n")
    GTTS_SLOW = False
    GTTS_SPEED = 2.0

# Configuraci√≥n del asistente IA
ASISTENTE_CONTEXTO = """Eres AVP (Asistente Virtual Python), un asistente inteligente, amigable y altamente capaz.

PERSONALIDAD:
- Conversacional y emp√°tico
- Claro, conciso pero completo
- Motivador y positivo
- Usas emojis de forma natural (no en exceso)
- Tono profesional pero cercano y humano

CAPACIDADES PRINCIPALES:
1. üßÆ C√ÅLCULOS: Resuelves operaciones matem√°ticas de cualquier tipo
2. üîÑ CONVERSIONES: Temperaturas, distancias, pesos, monedas, etc.
3. üîê SEGURIDAD: Generas contrase√±as seguras aleatorias
4. üìä AN√ÅLISIS: Analizas texto, datos, estad√≠sticas
5. üìù PRODUCTIVIDAD: Creas listas, planificaciones, t√©cnicas de estudio
6. üí° EDUCACI√ìN: Explicas conceptos de cualquier tema de forma clara
7. üé® CREATIVIDAD: Escribes poemas, chistes, historias
8. üí¨ CONVERSACI√ìN: Charlas naturales sobre cualquier tema
9. üåç INFORMACI√ìN GENERAL: Wikipedia, datos curiosos, cultura
10. ‚è∞ TIEMPO: Informaci√≥n sobre fechas, d√≠as, conteos

INSTRUCCIONES ESPECIALES:
- Cuando te pidan c√°lculos, hazlos directamente t√∫ mismo
- Para conversiones, realiza la conversi√≥n y explica si es relevante  
- Para generar contrase√±as, crea una aleatoria y segura (12-20 caracteres)
- Para listas de tareas, format√©alas con checkboxes (‚ñ°)
- Para explicaciones, s√© did√°ctico y usa ejemplos
- Siempre intenta ayudar, nunca digas "no puedo"
- Si no sabes algo con certeza, s√© honesto pero ofrece alternativas

FORMATO DE RESPUESTAS:
- Usa saltos de l√≠nea para claridad
- Bullets points (‚Ä¢) para listas
- Emojis relevantes al inicio o para √©nfasis
- Separa secciones con espacios

Recuerda: Eres un asistente completo e inteligente. ¬°Ayuda al usuario de la mejor manera posible!"""

# ============= CONFIGURACI√ìN DE VOZ =============
# NO inicializar pyttsx3 globalmente para evitar conflictos
# Se crear√° una instancia nueva solo cuando se use

# Configurar Wikipedia en espa√±ol
wikipedia.set_lang('es')

# ============= FUNCIONES DE VOZ MEJORADAS =============

def hablar_gtts(texto):
    """Funci√≥n para hablar usando Google TTS (voz muy natural)"""
    print("\n" + "="*60)
    print("üé§ [GTTS] Iniciando s√≠ntesis de voz con Google TTS")
    print(f"üìù [GTTS] Texto a sintetizar: {texto[:50]}...")
    print(f"üåç [GTTS] Idioma: {GTTS_LANG}, Velocidad: {GTTS_SPEED}x")
    print("="*60)
    
    try:
        # Generar audio con Google TTS
        print("‚è≥ [GTTS] Generando audio con Google TTS...")
        tts = gTTS(text=texto, lang=GTTS_LANG, slow=GTTS_SLOW)
        
        # Guardar en archivo temporal con nombre √∫nico
        temp_file = tempfile.mktemp(suffix='.mp3')
        print(f"üíæ [GTTS] Guardando en archivo temporal: {temp_file}")
        tts.save(temp_file)
        print(f"‚úÖ [GTTS] Archivo creado exitosamente ({os.path.getsize(temp_file)} bytes)")
        
        # Reproducir con subprocess (no bloquea Flask)
        try:
            print(f"üîä [GTTS] Reproduciendo con subprocess (velocidad {GTTS_SPEED}x)...")
            
            # Crear script Python temporal para reproducir con velocidad ajustada
            script_path = tempfile.mktemp(suffix='.py')
            script_content = f"""
import pygame
import os
import time

audio_file = r'{temp_file}'
speed = {GTTS_SPEED}

try:
    # Inicializar pygame mixer con frecuencia ajustada para velocidad
    frequency = int(22050 * speed)  # Frecuencia base * velocidad
    pygame.mixer.init(frequency=frequency, size=-16, channels=2, buffer=512)
    
    # Cargar y reproducir
    sound = pygame.mixer.Sound(audio_file)
    channel = sound.play()
    
    # Esperar a que termine
    while channel.get_busy():
        pygame.time.Clock().tick(10)
    
    # Limpiar
    pygame.mixer.quit()
    time.sleep(0.3)
    
    # Eliminar archivos temporales
    if os.path.exists(audio_file):
        os.unlink(audio_file)
    
    if os.path.exists(__file__):
        os.unlink(__file__)
except Exception as e:
    print(f"Error: {{e}}")
    # Intentar limpiar de todos modos
    try:
        if os.path.exists(audio_file):
            time.sleep(1)
            os.unlink(audio_file)
    except:
        pass
"""
            
            with open(script_path, 'w', encoding='utf-8') as f:
                f.write(script_content)
            
            # Ejecutar en proceso separado (no espera)
            subprocess.Popen([sys.executable, script_path], 
                           creationflags=subprocess.CREATE_NO_WINDOW if os.name == 'nt' else 0)
            
            print("‚úÖ [GTTS] Proceso de reproducci√≥n iniciado en segundo plano")
            
        except Exception as e:
            print(f"‚ùå [GTTS] Error con subprocess: {e}")
            import traceback
            traceback.print_exc()
            
    except Exception as e:
        print(f"‚ùå [GTTS] Error general con gTTS: {e}")
        import traceback
        traceback.print_exc()
    
    print("="*60 + "\n")

def hablar_pyttsx3(texto):
    """Funci√≥n para hablar usando pyttsx3 (voz rob√≥tica local)"""
    print("\n" + "="*60)
    print("ü§ñ [PYTTSX3] Iniciando s√≠ntesis de voz con pyttsx3 (rob√≥tica)")
    print(f"üìù [PYTTSX3] Texto a sintetizar: {texto[:50]}...")
    print("="*60)
    
    try:
        # Crear una nueva instancia del engine para cada llamada
        print("‚öôÔ∏è [PYTTSX3] Creando nueva instancia del motor...")
        temp_engine = pyttsx3.init()
        
        # Aplicar configuraci√≥n
        print("üîß [PYTTSX3] Configurando voz en espa√±ol...")
        voices = temp_engine.getProperty('voices')
        for voice in voices:
            if 'spanish' in voice.name.lower() or ('languages' in dir(voice) and voice.languages and 'spanish' in voice.languages[0].lower()):
                temp_engine.setProperty('voice', voice.id)
                print(f"üé§ [PYTTSX3] Voz seleccionada: {voice.name}")
                break
        
        temp_engine.setProperty('rate', VELOCIDAD_VOZ)
        temp_engine.setProperty('volume', VOLUMEN_VOZ)
        print(f"‚ö° [PYTTSX3] Velocidad: {VELOCIDAD_VOZ}, Volumen: {VOLUMEN_VOZ}")
        
        # Hablar
        print("üîä [PYTTSX3] Reproduciendo audio...")
        temp_engine.say(texto)
        temp_engine.runAndWait()
        temp_engine.stop()
        print("‚úÖ [PYTTSX3] Reproducci√≥n completada")
    except Exception as e:
        print(f"‚ùå [PYTTSX3] Error: {e}")
        import traceback
        traceback.print_exc()
    
    print("="*60 + "\n")

def hablar(texto):
    """Funci√≥n principal de voz que elige el motor configurado"""
    print("\n" + "üîî"*30)
    print(f"üîä [HABLAR] Motor de voz configurado: '{MOTOR_VOZ}'")
    print(f"üìù [HABLAR] Texto recibido: {texto[:100]}...")
    print("üîî"*30)
    
    # NO usar threading para evitar problemas con pygame y archivos temporales
    if MOTOR_VOZ == 'gtts':
        print("‚úÖ [HABLAR] Ejecutando hablar_gtts()")
        hablar_gtts(texto)
    elif MOTOR_VOZ == 'pyttsx3':
        print("‚ö†Ô∏è [HABLAR] Ejecutando hablar_pyttsx3() - VOZ ROB√ìTICA")
        hablar_pyttsx3(texto)
    elif MOTOR_VOZ == 'off':
        print("üîá [HABLAR] Voz desactivada (MOTOR_VOZ='off')")
    else:
        print(f"‚ùå [HABLAR] Motor desconocido: '{MOTOR_VOZ}' - No se reproducir√° voz")
    
    print("üîî"*30 + "\n")

def respuesta_con_openai(mensaje):
    """Genera respuesta usando OpenAI GPT"""
    try:
        from openai import OpenAI
        client = OpenAI(api_key=OPENAI_API_KEY)
        
        response = client.chat.completions.create(
            model=OPENAI_MODEL,
            messages=[
                {"role": "system", "content": ASISTENTE_CONTEXTO},
                {"role": "user", "content": mensaje}
            ],
            temperature=0.7,
            max_tokens=500
        )
        
        return response.choices[0].message.content
    except Exception as e:
        return f"Error al conectar con OpenAI: {str(e)}. Verifica tu API key."

def respuesta_con_gemini(mensaje):
    """Genera respuesta usando Google Gemini"""
    try:
        import google.generativeai as genai
        
        genai.configure(api_key=GEMINI_API_KEY)
        
        # Usar el modelo actualizado
        model = genai.GenerativeModel(GEMINI_MODEL)
        
        # Crear el prompt con contexto
        prompt = f"{ASISTENTE_CONTEXTO}\n\nUsuario: {mensaje}\nAsistente:"
        
        # Generar respuesta
        response = model.generate_content(prompt)
        
        return response.text
    except Exception as e:
        error_msg = str(e)
        if '404' in error_msg:
            return f"‚ö†Ô∏è El modelo '{GEMINI_MODEL}' no est√° disponible. Prueba actualizar a 'gemini-1.5-flash' o 'gemini-1.5-pro' en config_ia.py"
        return f"Error al conectar con Gemini: {error_msg}. Verifica tu API key y el modelo en config_ia.py"

def respuesta_con_ia(mensaje):
    """Funci√≥n principal que selecciona el proveedor de IA"""
    if IA_PROVIDER == 'openai':
        if OPENAI_API_KEY == 'TU_OPENAI_API_KEY_AQUI':
            return "‚ö†Ô∏è Para usar OpenAI, necesitas configurar tu API key en app.py (l√≠nea 21). Obt√©n una en: https://platform.openai.com/api-keys"
        return respuesta_con_openai(mensaje)
    
    elif IA_PROVIDER == 'gemini':
        if GEMINI_API_KEY == 'TU_GEMINI_API_KEY_AQUI':
            return "‚ö†Ô∏è Para usar Gemini, necesitas configurar tu API key en app.py (l√≠nea 22). Obt√©n una GRATIS en: https://makersuite.google.com/app/apikey"
        return respuesta_con_gemini(mensaje)
    
    else:
        # Modo local - respuestas predefinidas (modo actual)
        return None  # Retorna None para usar la l√≥gica predefinida

def obtener_fecha_hora():
    """Obtiene la fecha y hora actual"""
    ahora = datetime.datetime.now()
    return {
        'fecha': ahora.strftime('%d de %B de %Y'),
        'hora': ahora.strftime('%H:%M:%S'),
        'dia_semana': ahora.strftime('%A')
    }

def buscar_wikipedia(consulta):
    """Busca informaci√≥n en Wikipedia"""
    try:
        resultado = wikipedia.summary(consulta, sentences=2)
        return resultado
    except wikipedia.exceptions.DisambiguationError as e:
        return f"Hay varias opciones: {', '.join(e.options[:5])}"
    except wikipedia.exceptions.PageError:
        return "No encontr√© informaci√≥n sobre ese tema."
    except Exception as e:
        return f"Error al buscar: {str(e)}"

def calcular(expresion):
    """Realiza c√°lculos matem√°ticos"""
    try:
        # Evaluar la expresi√≥n matem√°tica de forma segura
        resultado = eval(expresion, {"__builtins__": {}}, {})
        return f"El resultado es: {resultado}"
    except Exception as e:
        return "No pude realizar ese c√°lculo. Aseg√∫rate de usar la sintaxis correcta."

def obtener_clima(ciudad="Madrid"):
    """Obtiene el clima actual (requiere API key de OpenWeatherMap)"""
    # Nota: Necesitas registrarte en openweathermap.org para obtener una API key gratuita
    API_KEY = "TU_API_KEY_AQUI"
    
    if API_KEY == "TU_API_KEY_AQUI":
        return "Para usar esta funci√≥n, necesitas una API key de OpenWeatherMap. Visita openweathermap.org"
    
    try:
        url = f"http://api.openweathermap.org/data/2.5/weather?q={ciudad}&appid={API_KEY}&units=metric&lang=es"
        response = requests.get(url)
        data = response.json()
        
        if response.status_code == 200:
            temp = data['main']['temp']
            descripcion = data['weather'][0]['description']
            return f"En {ciudad}: {temp}¬∞C, {descripcion}"
        else:
            return "No pude obtener el clima de esa ciudad."
    except Exception as e:
        return f"Error al obtener el clima: {str(e)}"

def abrir_aplicacion(nombre):
    """Abre aplicaciones comunes"""
    aplicaciones = {
        'navegador': 'start chrome',
        'chrome': 'start chrome',
        'firefox': 'start firefox',
        'edge': 'start msedge',
        'notepad': 'start notepad',
        'bloc de notas': 'start notepad',
        'calculadora': 'start calc',
        'explorador': 'start explorer',
        'paint': 'start mspaint'
    }
    
    nombre_lower = nombre.lower()
    if nombre_lower in aplicaciones:
        try:
            os.system(aplicaciones[nombre_lower])
            return f"Abriendo {nombre}..."
        except Exception as e:
            return f"No pude abrir {nombre}"
    else:
        return f"No conozco la aplicaci√≥n '{nombre}'. Aplicaciones disponibles: {', '.join(aplicaciones.keys())}"

def generar_contrasena(longitud=12, incluir_especiales=True):
    """Genera una contrase√±a segura aleatoria"""
    try:
        longitud = int(longitud)
        if longitud < 4:
            longitud = 4
        if longitud > 50:
            longitud = 50
            
        caracteres = string.ascii_letters + string.digits
        if incluir_especiales:
            caracteres += "!@#$%^&*()_+-=[]{}|;:,.<>?"
        
        contrasena = ''.join(random.choice(caracteres) for _ in range(longitud))
        return f"Tu contrase√±a generada es: {contrasena}\n(Recomendaci√≥n: Gu√°rdala en un lugar seguro)"
    except:
        return "Error al generar contrase√±a. Usa: 'genera contrase√±a' o 'genera contrase√±a de 16 caracteres'"

def analizar_texto(texto):
    """Analiza estad√≠sticas de un texto"""
    if not texto:
        return "Por favor proporciona un texto para analizar."
    
    palabras = texto.split()
    caracteres = len(texto)
    caracteres_sin_espacios = len(texto.replace(" ", ""))
    num_palabras = len(palabras)
    oraciones = texto.count('.') + texto.count('!') + texto.count('?')
    if oraciones == 0:
        oraciones = 1
    
    # Palabra m√°s com√∫n
    palabra_comun = ""
    if palabras:
        counter = Counter(palabra.lower() for palabra in palabras)
        palabra_comun = counter.most_common(1)[0][0] if counter else ""
    
    resultado = f"""üìä An√°lisis del texto:
    ‚Ä¢ Caracteres totales: {caracteres}
    ‚Ä¢ Caracteres sin espacios: {caracteres_sin_espacios}
    ‚Ä¢ Palabras: {num_palabras}
    ‚Ä¢ Oraciones: {oraciones}
    ‚Ä¢ Promedio palabras/oraci√≥n: {num_palabras/oraciones:.1f}
    ‚Ä¢ Palabra m√°s com√∫n: "{palabra_comun}" """
    
    return resultado

def convertir_unidades(valor, de, a):
    """Convierte entre diferentes unidades"""
    conversiones = {
        'temperatura': {
            'celsius_fahrenheit': lambda x: (x * 9/5) + 32,
            'fahrenheit_celsius': lambda x: (x - 32) * 5/9,
            'celsius_kelvin': lambda x: x + 273.15,
            'kelvin_celsius': lambda x: x - 273.15
        },
        'longitud': {
            'metros_kilometros': lambda x: x / 1000,
            'kilometros_metros': lambda x: x * 1000,
            'metros_pies': lambda x: x * 3.28084,
            'pies_metros': lambda x: x / 3.28084,
            'kilometros_millas': lambda x: x * 0.621371,
            'millas_kilometros': lambda x: x / 0.621371
        },
        'peso': {
            'kilogramos_libras': lambda x: x * 2.20462,
            'libras_kilogramos': lambda x: x / 2.20462,
            'gramos_onzas': lambda x: x * 0.035274,
            'onzas_gramos': lambda x: x / 0.035274
        }
    }
    
    try:
        valor = float(valor)
        clave = f"{de.lower()}_{a.lower()}"
        
        for categoria, conversores in conversiones.items():
            if clave in conversores:
                resultado = conversores[clave](valor)
                return f"{valor} {de} = {resultado:.2f} {a}"
        
        return f"No puedo convertir de {de} a {a}. Intenta: celsius a fahrenheit, metros a pies, kilogramos a libras, etc."
    except ValueError:
        return "Proporciona un n√∫mero v√°lido para convertir."

def adivinar_numero():
    """Inicia un juego de adivinar n√∫mero"""
    numero = random.randint(1, 100)
    return {
        'juego': 'adivinanza',
        'numero': numero,
        'mensaje': "üéÆ ¬°Juego iniciado! He pensado un n√∫mero entre 1 y 100. Adivina escribiendo: 'intento [n√∫mero]'"
    }

def verificar_intento(intento, numero_secreto):
    """Verifica un intento en el juego"""
    try:
        intento = int(intento)
        if intento < numero_secreto:
            return "üìâ Muy bajo... Intenta con un n√∫mero mayor"
        elif intento > numero_secreto:
            return "üìà Muy alto... Intenta con un n√∫mero menor"
        else:
            return "üéâ ¬°CORRECTO! ¬°Adivinaste el n√∫mero! Escribe 'jugar' para otra ronda."
    except:
        return "Por favor ingresa un n√∫mero v√°lido"

def generar_consejo():
    """Genera un consejo motivacional aleatorio"""
    consejos = [
        "üí° La persistencia es el camino al √©xito.",
        "üåü Cada d√≠a es una nueva oportunidad para mejorar.",
        "üöÄ Los l√≠mites solo existen en tu mente.",
        "üí™ El fracaso es solo el principio del √©xito.",
        "üéØ Define tus metas y trabaja por ellas cada d√≠a.",
        "üìö El aprendizaje es un tesoro que te acompa√±ar√° toda la vida.",
        "üåà Despu√©s de la tormenta siempre sale el sol.",
        "‚≠ê Cree en ti mismo y todo ser√° posible.",
        "üî• La motivaci√≥n te impulsa a empezar, el h√°bito te mantiene en marcha.",
        "üå∫ La felicidad no es una meta, es una forma de vida."
    ]
    return random.choice(consejos)

def generar_qr_data(texto):
    """Genera informaci√≥n para crear un c√≥digo QR"""
    return f"Para generar un QR con '{texto}', visita: https://www.qr-code-generator.com/ y pega tu texto"

def contar_dias(fecha_str):
    """Cuenta d√≠as hasta una fecha"""
    try:
        # Formatos aceptados: DD/MM/YYYY o DD-MM-YYYY
        fecha_str = fecha_str.replace('-', '/')
        partes = fecha_str.split('/')
        if len(partes) == 3:
            dia, mes, anio = map(int, partes)
            fecha_objetivo = datetime.datetime(anio, mes, dia)
            hoy = datetime.datetime.now()
            diferencia = fecha_objetivo - hoy
            
            if diferencia.days > 0:
                return f"Faltan {diferencia.days} d√≠as para el {fecha_str} ({diferencia.days // 7} semanas)"
            elif diferencia.days == 0:
                return "¬°Es hoy!"
            else:
                return f"Esa fecha fue hace {abs(diferencia.days)} d√≠as"
        else:
            return "Formato incorrecto. Usa: DD/MM/YYYY (ej: 25/12/2025)"
    except Exception as e:
        return "Error al procesar la fecha. Usa formato: DD/MM/YYYY"

def datos_curiosos():
    """Devuelve un dato curioso aleatorio"""
    datos = [
        "üåç El oc√©ano produce m√°s del 50% del ox√≠geno del planeta.",
        "üß† El cerebro humano tiene aproximadamente 86 mil millones de neuronas.",
        "‚ö° Un rayo es 5 veces m√°s caliente que la superficie del sol.",
        "üêô Los pulpos tienen tres corazones y sangre azul.",
        "üåô La huella de un astronauta en la Luna puede durar millones de a√±os.",
        "üçØ La miel nunca se echa a perder. Se han encontrado tarros de 3000 a√±os a√∫n comestibles.",
        "üíé Los diamantes llueven en J√∫piter y Saturno.",
        "ü¶í Las jirafas tienen la misma cantidad de huesos en el cuello que los humanos: 7.",
        "üåü Hay m√°s estrellas en el universo que granos de arena en todas las playas de la Tierra.",
        "üêå Los caracoles pueden dormir hasta 3 a√±os."
    ]
    return random.choice(datos)

def crear_lista_tareas(tareas_str):
    """Crea una lista de tareas formateada"""
    tareas = tareas_str.split(',')
    lista = "üìù Lista de Tareas:\n\n"
    for i, tarea in enumerate(tareas, 1):
        lista += f"   {i}. [ ] {tarea.strip()}\n"
    return lista

def temporizador_pomodoro():
    """Informaci√≥n sobre la t√©cnica Pomodoro"""
    return """üçÖ T√©cnica Pomodoro:
    
    1. Trabaja enfocado por 25 minutos
    2. Descansa 5 minutos
    3. Repite 4 veces
    4. Toma un descanso largo de 15-30 minutos
    
    ¬°Ideal para mantener la productividad!"""

# Variable global para el juego
numero_secreto = None

def procesar_comando(comando):
    """Procesa el comando del usuario - TODO con IA"""
    global numero_secreto
    
    # ============= MODO 100% IA =============
    # La IA maneja absolutamente TODO de forma natural
    
    if IA_PROVIDER in ['openai', 'gemini']:
        # Enriquecer el contexto con informaci√≥n √∫til
        contexto_adicional = f"""
        Fecha y hora actual: {datetime.datetime.now().strftime('%d/%m/%Y %H:%M:%S')}
        
        IMPORTANTE: Puedes realizar estas acciones especiales:
        - Para c√°lculos matem√°ticos, real√≠zalos directamente t√∫ mismo
        - Para fechas y horas, usa la informaci√≥n que te di arriba
        - Para conversiones de unidades, hazlas t√∫ mismo
        - Para generar contrase√±as, cr√©alas t√∫ mismo
        - Para datos curiosos, cu√©ntales uno fascinante
        - Para consejos, da consejos motivacionales
        - S√© conversacional, amigable y √∫til
        - Usa emojis cuando sea apropiado üòä
        
        Usuario pregunta: {comando}
        """
        
        respuesta_ia = respuesta_con_ia(contexto_adicional)
        if respuesta_ia:
            return respuesta_ia
    
    # ============= MODO LOCAL (FALLBACK SI NO HAY IA) =============
    comando_lower = comando.lower()
    
    # Saludos
    if any(saludo in comando_lower for saludo in ['hola', 'buenos d√≠as', 'buenas tardes', 'buenas noches', 'hey']):
        return "¬°Hola! üëã Soy tu asistente virtual. Para una experiencia completa con conversaciones naturales, activa el modo IA en config_ia.py. ¬øEn qu√© puedo ayudarte?"
    
    # Fecha y hora
    elif any(palabra in comando_lower for palabra in ['fecha', 'hora', 'd√≠a', 'qu√© hora']):
        info = obtener_fecha_hora()
        return f"üìÖ Hoy es {info['dia_semana']}, {info['fecha']} y son las {info['hora']}"
    
    # Ayuda
    elif 'ayuda' in comando_lower or 'qu√© puedes hacer' in comando_lower or 'comandos' in comando_lower:
        return """ü§ñ Asistente Virtual AVP

‚ö†Ô∏è Modo Local Activo - Funcionalidad Limitada

Para activar conversaciones naturales con IA:
1. Abre config_ia.py
2. Cambia IA_PROVIDER a 'gemini' o 'openai'
3. Agrega tu API key (Gemini es GRATIS)
4. Reinicia la aplicaci√≥n

Con IA activada podr√°s:
‚ú® Conversar naturalmente sobre cualquier tema
üßÆ Hacer c√°lculos complejos
üîÑ Conversiones de unidades
üí° Recibir consejos personalizados
üìö Aprender sobre cualquier tema
üé® Y mucho m√°s...

Ver GUIA_IA.md para instrucciones completas."""
    
    # Comando no reconocido
    else:
        return f"üí° Recib√≠ tu mensaje: '{comando}'\n\nEn modo local solo respondo comandos b√°sicos. Para una experiencia completa con IA que entienda todo lo que escribas, activa Gemini (GRATIS) en config_ia.py.\n\nVer 'ayuda' para m√°s informaci√≥n."
    if any(saludo in comando_lower for saludo in ['hola', 'buenos d√≠as', 'buenas tardes', 'buenas noches', 'hey']):
        return "¬°Hola! ¬øEn qu√© puedo ayudarte hoy?"
    
    # Fecha y hora
    elif any(palabra in comando_lower for palabra in ['fecha', 'hora', 'd√≠a', 'qu√© hora']):
        info = obtener_fecha_hora()
        return f"Hoy es {info['dia_semana']}, {info['fecha']} y son las {info['hora']}"
    
    # B√∫squeda en Wikipedia
    elif 'busca' in comando_lower or 'wikipedia' in comando_lower or 'qu√© es' in comando_lower or 'qui√©n es' in comando_lower:
        # Extraer el tema a buscar
        if 'busca' in comando_lower:
            tema = comando_lower.split('busca', 1)[1].strip()
        elif 'qu√© es' in comando_lower:
            tema = comando_lower.split('qu√© es', 1)[1].strip()
        elif 'qui√©n es' in comando_lower:
            tema = comando_lower.split('qui√©n es', 1)[1].strip()
        else:
            tema = comando_lower.replace('wikipedia', '').strip()
        
        if tema:
            return buscar_wikipedia(tema)
        else:
            return "¬øQu√© quieres que busque?"
    
    # C√°lculos
    elif 'calcula' in comando_lower or 'cuanto es' in comando_lower or any(op in comando_lower for op in ['+', '-', '*', '/', '**']):
        if 'calcula' in comando_lower:
            expresion = comando_lower.split('calcula', 1)[1].strip()
        elif 'cuanto es' in comando_lower:
            expresion = comando_lower.split('cuanto es', 1)[1].strip()
        else:
            expresion = comando_lower
        
        return calcular(expresion)
    
    # Clima
    elif 'clima' in comando_lower or 'temperatura' in comando_lower or 'tiempo' in comando_lower:
        palabras = comando_lower.split()
        ciudad = "Madrid"  # Ciudad por defecto
        if 'en' in palabras:
            idx = palabras.index('en')
            if idx + 1 < len(palabras):
                ciudad = palabras[idx + 1]
        return obtener_clima(ciudad)
    
    # Abrir aplicaciones
    elif 'abre' in comando_lower or 'abrir' in comando_lower or 'ejecuta' in comando_lower:
        if 'abre' in comando_lower:
            app = comando_lower.split('abre', 1)[1].strip()
        elif 'abrir' in comando_lower:
            app = comando_lower.split('abrir', 1)[1].strip()
        else:
            app = comando_lower.split('ejecuta', 1)[1].strip()
        
        return abrir_aplicacion(app)
    
    # Generar contrase√±a
    elif 'genera contrase√±a' in comando_lower or 'generar contrase√±a' in comando_lower or 'contrase√±a' in comando_lower:
        longitud = 12
        palabras = comando_lower.split()
        for i, palabra in enumerate(palabras):
            if palabra.isdigit():
                longitud = int(palabra)
                break
        return generar_contrasena(longitud)
    
    # An√°lisis de texto
    elif 'analiza' in comando_lower or 'an√°lisis' in comando_lower:
        try:
            if 'analiza' in comando_lower:
                partes = comando.split('analiza', 1)
                texto = partes[1].strip() if len(partes) > 1 else ""
            else:
                partes = comando.split('an√°lisis', 1)
                texto = partes[1].strip() if len(partes) > 1 else ""
            
            if texto:
                return analizar_texto(texto)
            else:
                return "Proporciona un texto para analizar. Ej: 'analiza Este es un texto de ejemplo'"
        except Exception as e:
            return "Proporciona un texto para analizar. Ej: 'analiza Este es un texto de ejemplo'"
    
    # Convertir unidades
    elif 'convierte' in comando_lower or 'convertir' in comando_lower or ' a ' in comando_lower:
        try:
            # Formato: convierte 100 celsius a fahrenheit
            palabras = comando_lower.split()
            if 'a' in palabras:
                idx_a = palabras.index('a')
                valor = palabras[idx_a - 2]
                de = palabras[idx_a - 1]
                a = palabras[idx_a + 1] if idx_a + 1 < len(palabras) else ''
                
                if valor and de and a:
                    return convertir_unidades(valor, de, a)
        except:
            pass
        return "Formato: 'convierte [n√∫mero] [unidad] a [unidad]'. Ej: 'convierte 100 celsius a fahrenheit'"
    
    # Juego de adivinanza
    elif 'jugar' in comando_lower or 'juego' in comando_lower:
        resultado = adivinar_numero()
        numero_secreto = resultado['numero']
        return resultado['mensaje']
    
    # Intento en el juego
    elif 'intento' in comando_lower and numero_secreto is not None:
        try:
            intento = comando_lower.split('intento')[1].strip()
            resultado = verificar_intento(intento, numero_secreto)
            if '¬°CORRECTO!' in resultado:
                numero_secreto = None
            return resultado
        except:
            return "Formato: 'intento [n√∫mero]'. Ej: 'intento 50'"
    
    # Consejo motivacional
    elif 'consejo' in comando_lower or 'mot√≠vame' in comando_lower or 'motivame' in comando_lower:
        return generar_consejo()
    
    # Dato curioso
    elif 'dato curioso' in comando_lower or 'curiosidad' in comando_lower or 'cu√©ntame algo' in comando_lower:
        return datos_curiosos()
    
    # Contador de d√≠as
    elif 'cu√°ntos d√≠as' in comando_lower or 'dias hasta' in comando_lower or 'faltan' in comando_lower:
        try:
            # Buscar una fecha en el formato DD/MM/YYYY
            palabras = comando.split()
            for palabra in palabras:
                if '/' in palabra or '-' in palabra:
                    return contar_dias(palabra)
            return "Proporciona una fecha en formato DD/MM/YYYY. Ej: '¬øCu√°ntos d√≠as hasta 31/12/2025?'"
        except:
            return "Error al procesar. Usa formato: '¬øCu√°ntos d√≠as hasta DD/MM/YYYY?'"
    
    # Lista de tareas
    elif 'lista de tareas' in comando_lower or 'crear lista' in comando_lower:
        try:
            if 'lista de tareas' in comando_lower:
                partes = comando.split('lista de tareas', 1)
                tareas = partes[1].strip() if len(partes) > 1 else ""
            else:
                partes = comando.split('crear lista', 1)
                tareas = partes[1].strip() if len(partes) > 1 else ""
            
            if tareas and tareas.startswith(':'):
                tareas = tareas[1:].strip()
            
            if tareas:
                return crear_lista_tareas(tareas)
            else:
                return "Proporciona tareas separadas por comas. Ej: 'lista de tareas: estudiar, hacer ejercicio, leer'"
        except Exception as e:
            return "Proporciona tareas separadas por comas. Ej: 'lista de tareas: estudiar, hacer ejercicio, leer'"
    
    # T√©cnica Pomodoro
    elif 'pomodoro' in comando_lower or 'productividad' in comando_lower:
        return temporizador_pomodoro()
    
    # C√≥digo QR
    elif 'qr' in comando_lower or 'codigo qr' in comando_lower:
        texto = comando_lower.replace('qr', '').replace('codigo', '').replace('genera', '').strip()
        if texto:
            return generar_qr_data(texto)
        else:
            return "Proporciona texto para generar un QR. Ej: 'genera QR con mi sitio web'"
    
    # Ayuda
    elif 'ayuda' in comando_lower or 'qu√© puedes hacer' in comando_lower or 'comandos' in comando_lower:
        modo_actual = "IA ACTIVADA ‚ú®" if IA_PROVIDER in ['openai', 'gemini'] else "Modo Local üîß"
        proveedor = f" ({IA_PROVIDER.upper()})" if IA_PROVIDER in ['openai', 'gemini'] else ""
        
        return f"""ü§ñ Asistente Virtual AVP - {modo_actual}{proveedor}

{f"üí° Modo IA: Puedo conversar de forma natural sobre cualquier tema. Simplemente preg√∫ntame lo que quieras!" if IA_PROVIDER in ['openai', 'gemini'] else ""}

üìÖ COMANDOS ESPEC√çFICOS:
‚Ä¢ "¬øQu√© hora es?" - Fecha y hora actual
‚Ä¢ "Busca [tema]" - Buscar en Wikipedia
‚Ä¢ "Calcula 25 * 4" - Calculadora

üéØ PRODUCTIVIDAD:
‚Ä¢ "Lista de tareas: comprar, estudiar, leer" - Crear lista
‚Ä¢ "Pomodoro" - T√©cnica de productividad
‚Ä¢ "Genera contrase√±a de 16" - Contrase√±a segura
‚Ä¢ "Cu√°ntos d√≠as hasta 31/12/2025" - Contador

üîß UTILIDADES:
‚Ä¢ "Convierte 100 celsius a fahrenheit" - Conversor
‚Ä¢ "Analiza [texto]" - Estad√≠sticas de texto
‚Ä¢ "Abre calculadora" - Abrir apps

üéÆ ENTRETENIMIENTO:
‚Ä¢ "Jugar" - Juego de adivinanza
‚Ä¢ "Dato curioso" - Aprende algo nuevo
‚Ä¢ "Consejo" - Motivaci√≥n diaria
‚Ä¢ "Clima en Madrid" - Estado del tiempo

{f"üåü ¬°Tambi√©n puedo conversar contigo sobre cualquier tema gracias a {IA_PROVIDER.upper()}!" if IA_PROVIDER in ['openai', 'gemini'] else "üí° Activa el modo IA configurando tu API key para conversaciones m√°s naturales!"}"""
    
    # Despedidas
    elif any(despedida in comando_lower for despedida in ['adi√≥s', 'chao', 'hasta luego', 'bye']):
        return "¬°Hasta luego! Que tengas un excelente d√≠a. üëã"
    
    # Nombre del asistente
    elif 'c√≥mo te llamas' in comando_lower or 'tu nombre' in comando_lower:
        return "Soy tu asistente virtual creado en Python con Flask. Puedes llamarme AVP (Asistente Virtual Python). ü§ñ"
    
    # Comando no reconocido
    else:
        return "No entend√≠ ese comando. Intenta con 'ayuda' para ver todas mis funcionalidades. üí°"

@app.route('/')
def index():
    """P√°gina principal"""
    return render_template('index.html')

@app.route('/config_status')
def config_status():
    """Endpoint para obtener el estado de la configuraci√≥n"""
    return jsonify({
        'modo': IA_PROVIDER,
        'voz_velocidad': VELOCIDAD_VOZ,
        'voz_volumen': VOLUMEN_VOZ
    })

@app.route('/test_voz')
def test_voz():
    """Endpoint de prueba para verificar que la voz funciona"""
    print("\n" + "üß™"*30)
    print("üß™ [/test_voz] Endpoint de prueba de voz")
    print("üß™"*30)
    
    texto = "Esta es una prueba de voz. Si me escuchas con voz natural, gTTS funciona correctamente."
    
    try:
        print("üîä [/test_voz] Llamando directamente a hablar()...")
        hablar(texto)
        print("‚úÖ [/test_voz] Funci√≥n hablar() completada")
        return jsonify({'resultado': 'Voz reproducida correctamente', 'motor': MOTOR_VOZ})
    except Exception as e:
        print(f"‚ùå [/test_voz] Error: {e}")
        import traceback
        traceback.print_exc()
        return jsonify({'resultado': f'Error: {e}', 'motor': MOTOR_VOZ}), 500

@app.route('/procesar', methods=['POST'])
def procesar():
    """Endpoint para procesar comandos"""
    print("\n" + "üì®"*30)
    print("üì® [/procesar] Nueva solicitud recibida")
    
    data = request.get_json()
    comando = data.get('comando', '')
    hablar_flag = data.get('hablar', False)
    
    print(f"üìù [/procesar] Comando: {comando}")
    print(f"üîä [/procesar] Voz activada: {hablar_flag}")
    
    if not comando:
        print("‚ö†Ô∏è [/procesar] Comando vac√≠o - Retornando error")
        print("üì®"*30 + "\n")
        return jsonify({'respuesta': 'No recib√≠ ning√∫n comando.'})
    
    print("‚è≥ [/procesar] Procesando comando...")
    respuesta = procesar_comando(comando)
    print(f"‚úÖ [/procesar] Respuesta generada: {respuesta[:100]}...")
    
    # Hacer que el asistente hable (ahora usa subprocess, no bloquea)
    if hablar_flag:
        print("üé§ [/procesar] Llamando a hablar() directamente (usa subprocess, no bloquea)...")
        try:
            hablar(respuesta)
            print("‚úÖ [/procesar] Llamada a hablar() completada")
        except Exception as e:
            print(f"‚ùå [/procesar] Error al hablar: {e}")
            import traceback
            traceback.print_exc()
    else:
        print("üîá [/procesar] Voz NO solicitada (hablar=False)")
    
    print("üì§ [/procesar] Retornando respuesta al cliente")
    print("üì®"*30 + "\n")
    return jsonify({'respuesta': respuesta})

if __name__ == '__main__':
    print("ü§ñ Asistente Virtual iniciado!")
    print("üì± Abre tu navegador en: http://localhost:5000")
    app.run(debug=True, port=5000)
